{"version":3,"sources":["db-test.js"],"names":["test","require","uuid","r","Db","dbName","v4","db","fixtures","before","t","connect","true","connected","after","disconnect","false","always","conn","dbDrop","run","is","saveImage","image","getImage","created","description","url","likes","liked","deepEqual","tags","user_id","public_id","encode","id","truthy","createdAt","likeImage","create","result"],"mappings":"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","file":"db-test.js","sourcesContent":[" 'use strict'\n\n const test = require('ava')\n const uuid = require('uuid-base62')\n const r = require('rethinkdb')\n const Db = require('../')\n const dbName = `newgram_${uuid.v4()}`\n const db = new Db({db: dbName})\n const fixtures = require('./fixtures')\n\n test.before('setup database', async t => {\n   await db.connect()\n   t.true(db.connected, 'should be connected')\n })\n\n test.after('disconnect database', async t => {\n   await db.disconnect()\n   t.false(db.connected, 'should be disconnected')\n })\n\n test.after.always('clean up database', async t => {\n   let conn = await r.connect({})\n   await r.dbDrop(dbName).run(conn)\n })\n\n test('save image', async t => {\n   t.is(typeof db.saveImage, 'function', 'saveImage is a function')\n\n   let image = fixtures.getImage()\n\n   let created = await db.saveImage(image)\n   t.is(created.description, image.description)\n   t.is(created.url, image.url)\n   t.is(created.likes, image.likes)\n   t.is(created.liked, image.liked)\n   t.deepEqual(created.tags, ['awesome', 'tags', 'newgram'])\n   t.is(created.user_id, image.user_id)\n   t.is(created.public_id, uuid.encode(created.id))\n   t.is(typeof created.id, 'string')\n   t.truthy(created.createdAt)\n })\n\n test('Like image', async t => {\n   t.is(typeof db.likeImage, 'function', 'LikeImage is a function')\n\n   let image = fixtures.getImage()\n   let create = await db.saveImage(image)\n   let result = await db.likeImage(create.public_id)\n\n   t.true(result.liked)\n   t.is(result.likes, image.likes + 1)\n })\n"]}