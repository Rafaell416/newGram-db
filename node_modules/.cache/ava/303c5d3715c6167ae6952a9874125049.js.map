{"version":3,"sources":["db-test.js"],"names":["test","require","uuid","r","Db","utils","fixtures","beforeEach","t","dbName","v4","db","connect","context","true","connected","afterEach","always","disconnect","false","conn","dbDrop","run","is","saveImage","image","getImage","created","description","url","likes","liked","deepEqual","tags","userId","publicId","encode","id","truthy","createdAt","likeImage","create","result","throws","images","getImages","saveImages","map","img","all","length","saveUser","user","getUser","plainPassword","password","username","email","name","encrypt","authenticate","success","fail","failure","getImagesByUser","random","Math","round","i","push"],"mappings":"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","file":"db-test.js","sourcesContent":[" 'use strict'\n\n const test = require('ava')\n const uuid = require('uuid-base62')\n const r = require('rethinkdb')\n const Db = require('../')\n const utils = require('../lib/utils')\n const fixtures = require('./fixtures')\n// test for that runs before each test\n test.beforeEach('setup database', async t => {\n   const dbName = `newgram_${uuid.v4()}`\n   const db = new Db({db: dbName})\n   await db.connect()\n   t.context.db = db\n   t.context.dbName = dbName\n   t.true(db.connected, 'should be connected')\n })\n// test for test that run after each test\n test.afterEach.always('cleanup database', async t => {\n   let db = t.context.db\n   let dbName = t.context.dbName\n\n   await db.disconnect()\n   t.false(db.connected, 'should be disconnected')\n   let conn = await r.connect({})\n   await r.dbDrop(dbName).run(conn)\n })\n// test for saving images\n test('save image', async t => {\n   let db = t.context.db\n   t.is(typeof db.saveImage, 'function', 'saveImage is a function')\n\n   let image = fixtures.getImage()\n\n   let created = await db.saveImage(image)\n   t.is(created.description, image.description)\n   t.is(created.url, image.url)\n   t.is(created.likes, image.likes)\n   t.is(created.liked, image.liked)\n   t.deepEqual(created.tags, ['awesome', 'tags', 'newgram'])\n   t.is(created.userId, image.userId)\n   t.is(created.publicId, uuid.encode(created.id))\n   t.is(typeof created.id, 'string')\n   t.truthy(created.createdAt)\n })\n// test for liking images\n test('Like image', async t => {\n   let db = t.context.db\n   t.is(typeof db.likeImage, 'function', 'LikeImage is a function')\n\n   let image = fixtures.getImage()\n   let create = await db.saveImage(image)\n   let result = await db.likeImage(create.publicId)\n\n   t.true(result.liked)\n   t.is(result.likes, image.likes + 1)\n })\n// test for getting images\n test('getImage', async t => {\n   let db = t.context.db\n   t.is(typeof db.getImage, 'function', 'getImage is a function')\n\n   let image = fixtures.getImage(3)\n   let created = await db.saveImage(image)\n   let result = await db.getImage(created.publicId)\n\n   t.deepEqual(created, result)\n\n   t.throws(db.getImage('foo'), /not found/)\n })\n// test for listing images\n test('list all images', async t => {\n   let db = t.context.db\n   let images = fixtures.getImages()\n   let saveImages = images.map(img => db.saveImage(img))\n   let created = await Promise.all(saveImages)\n   let result = await db.getImages()\n\n   t.is(created.length, result.length)\n })\n\n test('save user', async t => {\n   let db = t.context.db\n\n   t.is(typeof db.saveUser, 'function', 'saveUser is a function')\n\n   let user = fixtures.getUser()\n   let plainPassword = user.password\n   let created = await db.saveUser(user)\n\n   t.is(user.username, created.username)\n   t.is(user.email, created.email)\n   t.is(user.name, created.name)\n   t.is(utils.encrypt(plainPassword), created.password)\n   t.is(typeof created.id, 'string')\n   t.truthy(created.createdAt)\n })\n\n test('get user', async t => {\n   let db = t.context.db\n\n   t.is(typeof db.getUser, 'function', 'getUser is a function')\n\n   let user = fixtures.getUser()\n   let created = await db.saveUser(user)\n   let result = await db.getUser(user.username)\n\n   t.deepEqual(created, result)\n\n   t.throws(db.getUser('foo'), /not found/)\n })\n\n test('authenticate user', async t => {\n   let db = t.context.db\n\n   t.is(typeof db.authenticate, 'function', 'authenticate is a function')\n\n   let user = fixtures.getUser()\n   let plainPassword = user.password\n   await db.saveUser(user)\n\n   let success = await db.authenticate(user.username, plainPassword)\n   t.true(success)\n\n   let fail = await db.authenticate(user.username, 'foo')\n   t.false(fail)\n\n   let failure = await db.authenticate('foo', 'bar')\n   t.false(failure)\n })\n\n test('list images by user', async t => {\n   let db = t.context.db\n\n   t.is(typeof db.getImagesByUser, 'function', 'getImagesByUser is a function')\n\n   let images = fixtures.getImages(10)\n   let userId = uuid.uuid()\n   let random = Math.round(Math.random() * images.length)\n\n   let saveImages = []\n   for (let i = 0; i < images.length; i++) {\n     if (i < random) {\n       images[i].userId = userId\n     }\n     saveImages.push(db.saveImage(images[i]))\n   }\n   await Promise.all(saveImages)\n\n   let result = await db.getImagesByUser(userId)\n   t.is(result.length, random)\n })\n"]}