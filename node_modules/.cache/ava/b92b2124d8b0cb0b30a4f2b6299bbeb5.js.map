{"version":3,"sources":["db-test.js"],"names":["test","require","uuid","r","Db","fixtures","beforeEach","t","dbName","v4","db","connect","context","true","connected","afterEach","always","disconnect","false","conn","dbDrop","run","is","saveImage","image","getImage","created","description","url","likes","liked","deepEqual","tags","user_id","public_id","encode","id","truthy","createdAt","likeImage","create","result","images","getImages","saveImages","map","img","all","length"],"mappings":"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","file":"db-test.js","sourcesContent":[" 'use strict'\n\n const test = require('ava')\n const uuid = require('uuid-base62')\n const r = require('rethinkdb')\n const Db = require('../')\n const fixtures = require('./fixtures')\n\n test.beforeEach('setup database', async t => {\n   const dbName = `newgram_${uuid.v4()}`\n   const db = new Db({db: dbName})\n   await db.connect()\n   t.context.db = db\n   t.context.dbName = dbName\n   t.true(db.connected, 'should be connected')\n })\n\n test.afterEach.always('cleanup database', async t => {\n   let db = t.context.db = db\n   let dbName = t.context.dbName = dbName\n\n   await db.disconnect()\n   t.false(db.connected, 'should be disconnected')\n   let conn = await r.connect({})\n   await r.dbDrop(dbName).run(conn)\n })\n\n test('save image', async t => {\n   let db = t.context.db\n   t.is(typeof db.saveImage, 'function', 'saveImage is a function')\n\n   let image = fixtures.getImage()\n\n   let created = await db.saveImage(image)\n   t.is(created.description, image.description)\n   t.is(created.url, image.url)\n   t.is(created.likes, image.likes)\n   t.is(created.liked, image.liked)\n   t.deepEqual(created.tags, ['awesome', 'tags', 'newgram'])\n   t.is(created.user_id, image.user_id)\n   t.is(created.public_id, uuid.encode(created.id))\n   t.is(typeof created.id, 'string')\n   t.truthy(created.createdAt)\n })\n\n test('Like image', async t => {\n   let db = t.context.db\n   t.is(typeof db.likeImage, 'function', 'LikeImage is a function')\n\n   let image = fixtures.getImage()\n   let create = await db.saveImage(image)\n   let result = await db.likeImage(create.public_id)\n\n   t.true(result.liked)\n   t.is(result.likes, image.likes + 1)\n })\n\n test('getImage', async t => {\n   let db = t.context.db\n   t.is(typeof db.getImage, 'function', 'getImage is a function')\n\n   let image = fixtures.getImage(3)\n   let created = await db.saveImage(image)\n   let result = await db.getImage(created.public_id)\n\n   t.deepEqual(created, result)\n })\n\n test('list all images', async t => {\n   let db = t.context.db\n   let images = fixtures.getImages()\n   let saveImages = images.map(img => db.saveImage(img))\n   let created = await Promise.all(saveImages)\n   let result = await db.getImages()\n\n   t.is(created.length, result.length)\n })\n"]}